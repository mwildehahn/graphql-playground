/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as t from "./types"
import { core, connectionPluginCore } from "@nexus/schema"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CreateTaskListResponse: { // root type
    list?: NexusGenRootTypes['TaskListGQL'] | null; // TaskListGQL
    ok?: boolean | null; // Boolean
  }
  CreateTaskResponse: { // root type
    ok?: boolean | null; // Boolean
    task?: NexusGenRootTypes['TaskGQL'] | null; // TaskGQL
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  TaskGQL: { // root type
    createdById: string; // String!
    dateCreated: string; // String!
    dateUpdated: string; // String!
    id: string; // ID!
    title: string; // String!
  }
  TaskGQLConnection: { // root type
    edges?: Array<NexusGenRootTypes['TaskGQLEdge'] | null> | null; // [TaskGQLEdge]
    nodes?: Array<NexusGenRootTypes['TaskGQL'] | null> | null; // [TaskGQL]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TaskGQLEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['TaskGQL'] | null; // TaskGQL
  }
  TaskListGQL: { // root type
    createdById: string; // String!
    id: string; // ID!
    title: string; // String!
  }
  TaskListGQLConnection: { // root type
    edges?: Array<NexusGenRootTypes['TaskListGQLEdge'] | null> | null; // [TaskListGQLEdge]
    nodes?: Array<NexusGenRootTypes['TaskListGQL'] | null> | null; // [TaskListGQL]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TaskListGQLEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['TaskListGQL'] | null; // TaskListGQL
  }
  UserGQL: { // root type
    email: string; // String!
    id: string; // ID!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CreateTaskListResponse: { // field return type
    list: NexusGenRootTypes['TaskListGQL'] | null; // TaskListGQL
    ok: boolean | null; // Boolean
  }
  CreateTaskResponse: { // field return type
    ok: boolean | null; // Boolean
    task: NexusGenRootTypes['TaskGQL'] | null; // TaskGQL
  }
  Mutation: { // field return type
    createTask: NexusGenRootTypes['CreateTaskResponse'] | null; // CreateTaskResponse
    createTaskList: NexusGenRootTypes['CreateTaskListResponse'] | null; // CreateTaskListResponse
    login: string | null; // String
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    viewer: NexusGenRootTypes['UserGQL'] | null; // UserGQL
  }
  TaskGQL: { // field return type
    createdBy: NexusGenRootTypes['UserGQL']; // UserGQL!
    createdById: string; // String!
    dateCreated: string; // String!
    dateUpdated: string; // String!
    id: string; // ID!
    lists: NexusGenRootTypes['TaskListGQLConnection'] | null; // TaskListGQLConnection
    title: string; // String!
  }
  TaskGQLConnection: { // field return type
    edges: Array<NexusGenRootTypes['TaskGQLEdge'] | null> | null; // [TaskGQLEdge]
    nodes: Array<NexusGenRootTypes['TaskGQL'] | null> | null; // [TaskGQL]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TaskGQLEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['TaskGQL'] | null; // TaskGQL
  }
  TaskListGQL: { // field return type
    createdBy: NexusGenRootTypes['UserGQL']; // UserGQL!
    createdById: string; // String!
    id: string; // ID!
    tasks: NexusGenRootTypes['TaskGQLConnection'] | null; // TaskGQLConnection
    title: string; // String!
  }
  TaskListGQLConnection: { // field return type
    edges: Array<NexusGenRootTypes['TaskListGQLEdge'] | null> | null; // [TaskListGQLEdge]
    nodes: Array<NexusGenRootTypes['TaskListGQL'] | null> | null; // [TaskListGQL]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  TaskListGQLEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['TaskListGQL'] | null; // TaskListGQL
  }
  UserGQL: { // field return type
    email: string; // String!
    id: string; // ID!
    taskLists: NexusGenRootTypes['TaskListGQLConnection'] | null; // TaskListGQLConnection
  }
}

export interface NexusGenFieldTypeNames {
  CreateTaskListResponse: { // field return type name
    list: 'TaskListGQL'
    ok: 'Boolean'
  }
  CreateTaskResponse: { // field return type name
    ok: 'Boolean'
    task: 'TaskGQL'
  }
  Mutation: { // field return type name
    createTask: 'CreateTaskResponse'
    createTaskList: 'CreateTaskListResponse'
    login: 'String'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    viewer: 'UserGQL'
  }
  TaskGQL: { // field return type name
    createdBy: 'UserGQL'
    createdById: 'String'
    dateCreated: 'String'
    dateUpdated: 'String'
    id: 'ID'
    lists: 'TaskListGQLConnection'
    title: 'String'
  }
  TaskGQLConnection: { // field return type name
    edges: 'TaskGQLEdge'
    nodes: 'TaskGQL'
    pageInfo: 'PageInfo'
  }
  TaskGQLEdge: { // field return type name
    cursor: 'String'
    node: 'TaskGQL'
  }
  TaskListGQL: { // field return type name
    createdBy: 'UserGQL'
    createdById: 'String'
    id: 'ID'
    tasks: 'TaskGQLConnection'
    title: 'String'
  }
  TaskListGQLConnection: { // field return type name
    edges: 'TaskListGQLEdge'
    nodes: 'TaskListGQL'
    pageInfo: 'PageInfo'
  }
  TaskListGQLEdge: { // field return type name
    cursor: 'String'
    node: 'TaskListGQL'
  }
  UserGQL: { // field return type name
    email: 'String'
    id: 'ID'
    taskLists: 'TaskListGQLConnection'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createTask: { // args
      taskListId: string; // ID!
      title: string; // String!
    }
    createTaskList: { // args
      title: string; // String!
    }
    login: { // args
      email: string; // String!
    }
  }
  TaskGQL: {
    lists: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  TaskListGQL: {
    tasks: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  UserGQL: {
    taskLists: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}