/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as t from "./types"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CreateTaskListResponse: { // root type
    list?: NexusGenRootTypes['TaskListGQL'] | null; // TaskListGQL
    ok?: boolean | null; // Boolean
  }
  Mutation: {};
  Query: {};
  TaskListGQL: { // root type
    createdById: string; // String!
    id?: string | null; // ID
    title: string; // String!
  }
  UserGQL: { // root type
    email: string; // String!
    id: string; // ID!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CreateTaskListResponse: { // field return type
    list: NexusGenRootTypes['TaskListGQL'] | null; // TaskListGQL
    ok: boolean | null; // Boolean
  }
  Mutation: { // field return type
    createTaskList: NexusGenRootTypes['CreateTaskListResponse'] | null; // CreateTaskListResponse
    login: string | null; // String
  }
  Query: { // field return type
    viewer: NexusGenRootTypes['UserGQL'] | null; // UserGQL
  }
  TaskListGQL: { // field return type
    createdBy: NexusGenRootTypes['UserGQL'] | null; // UserGQL
    createdById: string; // String!
    id: string | null; // ID
    title: string; // String!
  }
  UserGQL: { // field return type
    email: string; // String!
    id: string; // ID!
    taskLists: Array<NexusGenRootTypes['TaskListGQL'] | null> | null; // [TaskListGQL]
  }
}

export interface NexusGenFieldTypeNames {
  CreateTaskListResponse: { // field return type name
    list: 'TaskListGQL'
    ok: 'Boolean'
  }
  Mutation: { // field return type name
    createTaskList: 'CreateTaskListResponse'
    login: 'String'
  }
  Query: { // field return type name
    viewer: 'UserGQL'
  }
  TaskListGQL: { // field return type name
    createdBy: 'UserGQL'
    createdById: 'String'
    id: 'ID'
    title: 'String'
  }
  UserGQL: { // field return type name
    email: 'String'
    id: 'ID'
    taskLists: 'TaskListGQL'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createTaskList: { // args
      title: string; // String!
    }
    login: { // args
      email: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}